"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyS3Assets = exports.removeDeprecatedProps = exports.saveResourceParameters = exports.copyCfnTemplate = exports.createAdminAuthAPI = exports.createAdminAuthFunction = exports.addAdminAuth = exports.createUserPoolGroups = exports.lambdaTriggers = exports.getResourceSynthesizer = void 0;
const path = __importStar(require("path"));
const fs_extra_1 = require("fs-extra");
const uuid_1 = __importDefault(require("uuid"));
const constants_1 = require("../constants");
const amplify_cli_core_1 = require("amplify-cli-core");
const category = 'auth';
exports.getResourceSynthesizer = (context, cfnFilename, provider) => async (request) => {
    await exports.lambdaTriggers(request, context, null);
    await exports.createUserPoolGroups(context, request.resourceName, request.userPoolGroupList);
    await exports.addAdminAuth(context, request.resourceName, 'add', request.adminQueryGroup);
    await exports.copyCfnTemplate(context, category, request, cfnFilename);
    exports.saveResourceParameters(context, provider, category, request.resourceName, request, constants_1.ENV_SPECIFIC_PARAMS);
    await exports.copyS3Assets(context, request);
    return request;
};
exports.lambdaTriggers = async (coreAnswers, context, previouslySaved) => {
    const { handleTriggers } = require('./trigger-flow-auth-helper');
    let triggerKeyValues = {};
    if (coreAnswers.triggers) {
        triggerKeyValues = await handleTriggers(context, coreAnswers, previouslySaved);
        coreAnswers.triggers = triggerKeyValues ? amplify_cli_core_1.JSONUtilities.stringify(triggerKeyValues) : '{}';
        if (triggerKeyValues) {
            coreAnswers.parentStack = { Ref: 'AWS::StackId' };
        }
        coreAnswers.permissions = await context.amplify.getTriggerPermissions(context, coreAnswers.triggers, 'auth', coreAnswers.resourceName);
    }
    else if (previouslySaved) {
        const targetDir = amplify_cli_core_1.pathManager.getBackendDirPath();
        Object.keys(previouslySaved).forEach(p => {
            delete coreAnswers[p];
        });
        await context.amplify.deleteAllTriggers(previouslySaved, coreAnswers.resourceName, targetDir, context);
    }
    if (coreAnswers.triggers && coreAnswers.triggers === '[]') {
        delete coreAnswers.triggers;
    }
    const dependsOnKeys = Object.keys(triggerKeyValues).map(i => `${coreAnswers.resourceName}${i}`);
    coreAnswers.dependsOn = context.amplify.dependsOnBlock(context, dependsOnKeys, 'Cognito');
};
exports.createUserPoolGroups = async (context, resourceName, userPoolGroupList) => {
    if (userPoolGroupList && userPoolGroupList.length > 0) {
        const userPoolGroupPrecedenceList = [];
        for (let i = 0; i < userPoolGroupList.length; i += 1) {
            userPoolGroupPrecedenceList.push({
                groupName: userPoolGroupList[i],
                precedence: i + 1,
            });
        }
        const userPoolGroupFile = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), 'auth', 'userPoolGroups', 'user-pool-group-precedence.json');
        const userPoolGroupParams = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), 'auth', 'userPoolGroups', 'parameters.json');
        const groupParams = {
            AuthRoleArn: {
                'Fn::GetAtt': ['AuthRole', 'Arn'],
            },
            UnauthRoleArn: {
                'Fn::GetAtt': ['UnauthRole', 'Arn'],
            },
        };
        amplify_cli_core_1.JSONUtilities.writeJson(userPoolGroupParams, groupParams);
        amplify_cli_core_1.JSONUtilities.writeJson(userPoolGroupFile, userPoolGroupPrecedenceList);
        context.amplify.updateamplifyMetaAfterResourceAdd('auth', 'userPoolGroups', {
            service: 'Cognito-UserPool-Groups',
            providerPlugin: 'awscloudformation',
            dependsOn: [
                {
                    category: 'auth',
                    resourceName,
                    attributes: ['UserPoolId', 'AppClientIDWeb', 'AppClientID', 'IdentityPoolId'],
                },
            ],
        });
    }
};
exports.addAdminAuth = async (context, authResourceName, operation, adminGroup, functionName) => {
    if (adminGroup) {
        if (!functionName) {
            const [shortId] = uuid_1.default().split('-');
            functionName = `AdminQueries${shortId}`;
        }
        await exports.createAdminAuthFunction(context, authResourceName, functionName, adminGroup, operation);
        await exports.createAdminAuthAPI(context, authResourceName, functionName, operation);
    }
};
exports.createAdminAuthFunction = async (context, authResourceName, functionName, adminGroup, operation) => {
    const targetDir = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), 'function', functionName);
    let lambdaGroupVar = adminGroup;
    const dependsOn = [];
    dependsOn.push({
        category: 'auth',
        resourceName: authResourceName,
        attributes: ['UserPoolId'],
    });
    if (!lambdaGroupVar) {
        lambdaGroupVar = 'NONE';
    }
    const functionProps = {
        functionName: `${functionName}`,
        roleName: `${functionName}LambdaRole`,
        dependsOn,
        authResourceName,
        lambdaGroupVar,
    };
    const copyJobs = [
        {
            dir: constants_1.adminAuthAssetRoot,
            template: 'admin-auth-app.js',
            target: path.join(targetDir, 'src/app.js'),
        },
        {
            dir: constants_1.adminAuthAssetRoot,
            template: 'admin-auth-cognitoActions.js',
            target: path.join(targetDir, 'src/cognitoActions.js'),
        },
        {
            dir: constants_1.adminAuthAssetRoot,
            template: 'admin-auth-index.js',
            target: path.join(targetDir, 'src/index.js'),
        },
        {
            dir: constants_1.adminAuthAssetRoot,
            template: 'admin-auth-package.json',
            target: path.join(targetDir, 'src/package.json'),
        },
        {
            dir: constants_1.adminAuthAssetRoot,
            template: 'admin-queries-function-template.json.ejs',
            target: path.join(targetDir, `${functionName}-cloudformation-template.json`),
        },
    ];
    await context.amplify.copyBatch(context, copyJobs, functionProps, true);
    if (operation === 'add') {
        const backendConfigs = {
            service: "Lambda",
            providerPlugin: 'awscloudformation',
            build: true,
            dependsOn,
        };
        await context.amplify.updateamplifyMetaAfterResourceAdd('function', functionName, backendConfigs);
        context.print.success(`Successfully added ${functionName} function locally`);
    }
    else {
        context.print.success(`Successfully updated ${functionName} function locally`);
    }
};
exports.createAdminAuthAPI = async (context, authResourceName, functionName, operation) => {
    const apiName = 'AdminQueries';
    const targetDir = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), 'api', apiName);
    const dependsOn = [];
    dependsOn.push({
        category: 'auth',
        resourceName: authResourceName,
        attributes: ['UserPoolId'],
    }, {
        category: 'function',
        resourceName: functionName,
        attributes: ['Arn', 'Name'],
    });
    const apiProps = {
        functionName,
        authResourceName,
        dependsOn,
    };
    const copyJobs = [
        {
            dir: constants_1.adminAuthAssetRoot,
            template: 'admin-queries-api-template.json.ejs',
            target: path.join(targetDir, 'admin-queries-cloudformation-template.json'),
        },
        {
            dir: constants_1.adminAuthAssetRoot,
            template: 'admin-queries-api-params.json',
            target: path.join(targetDir, 'parameters.json'),
        },
    ];
    await context.amplify.copyBatch(context, copyJobs, apiProps, true);
    if (operation === 'add') {
        const backendConfigs = {
            service: 'API Gateway',
            providerPlugin: 'awscloudformation',
            dependsOn,
        };
        await context.amplify.updateamplifyMetaAfterResourceAdd('api', apiName, backendConfigs);
        context.print.success(`Successfully added ${apiName} API locally`);
    }
    else {
        context.print.success(`Successfully updated ${apiName} API locally`);
    }
};
exports.copyCfnTemplate = async (context, category, options, cfnFilename) => {
    const targetDir = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), category, options.resourceName);
    const copyJobs = [
        {
            dir: constants_1.cfnTemplateRoot,
            template: cfnFilename,
            target: path.join(targetDir, `${options.resourceName}-cloudformation-template.yml`),
            paramsFile: path.join(targetDir, 'parameters.json'),
        },
    ];
    const privateParams = Object.assign({}, options);
    constants_1.privateKeys.forEach(p => delete privateParams[p]);
    return await context.amplify.copyBatch(context, copyJobs, privateParams, true);
};
exports.saveResourceParameters = (context, providerName, category, resource, params, envSpecificParams = []) => {
    const provider = context.amplify.getPluginInstance(context, providerName);
    let privateParams = Object.assign({}, params);
    constants_1.privateKeys.forEach(p => delete privateParams[p]);
    privateParams = exports.removeDeprecatedProps(privateParams);
    provider.saveResourceParameters(context, category, resource, privateParams, envSpecificParams);
};
exports.removeDeprecatedProps = (props) => {
    [
        'authRoleName',
        'unauthRoleName',
        'userpoolClientName',
        'roleName',
        'policyName',
        'mfaLambdaLogPolicy',
        'mfaPassRolePolicy',
        'mfaLambdaIAMPolicy',
        'userpoolClientLogPolicy',
        'userpoolClientLambdaPolicy',
        'lambdaLogPolicy',
        'openIdRolePolicy',
        'openIdLambdaIAMPolicy',
        'mfaLambdaRole',
        'openIdLambdaRoleName',
        'CreateAuthChallenge',
        'CustomMessage',
        'DefineAuthChallenge',
        'PostAuthentication',
        'PostConfirmation',
        'PreAuthentication',
        'PreSignup',
        'VerifyAuthChallengeResponse',
    ].forEach(deprecatedField => delete props[deprecatedField]);
    return props;
};
exports.copyS3Assets = async (context, props) => {
    const targetDir = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), 'auth', props.resourceName, 'assets');
    const triggers = props.triggers ? amplify_cli_core_1.JSONUtilities.parse(props.triggers) : null;
    const confirmationFileNeeded = props.triggers && triggers.CustomMessage && triggers.CustomMessage.includes('verification-link');
    if (confirmationFileNeeded) {
        if (!fs_extra_1.existsSync(targetDir)) {
            const source = path.join(constants_1.triggerRoot, 'CustomMessage/assets');
            fs_extra_1.copySync(source, targetDir);
        }
    }
};
//# sourceMappingURL=synthesize-resources.js.map