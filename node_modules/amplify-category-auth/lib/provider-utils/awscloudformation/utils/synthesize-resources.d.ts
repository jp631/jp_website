import { ServiceQuestionsResult } from '../service-walkthrough-types';
export declare const getResourceSynthesizer: (context: any, cfnFilename: string, provider: string) => (request: Readonly<ServiceQuestionsResult>) => Promise<Readonly<ServiceQuestionsResult>>;
export declare const lambdaTriggers: (coreAnswers: any, context: any, previouslySaved: any) => Promise<void>;
export declare const createUserPoolGroups: (context: any, resourceName: any, userPoolGroupList: any) => Promise<void>;
export declare const addAdminAuth: (context: any, authResourceName: string, operation: 'update' | 'add', adminGroup?: string | undefined, functionName?: string | undefined) => Promise<void>;
export declare const createAdminAuthFunction: (context: any, authResourceName: string, functionName: string, adminGroup: string, operation: 'update' | 'add') => Promise<void>;
export declare const createAdminAuthAPI: (context: any, authResourceName: string, functionName: string, operation: 'update' | 'add') => Promise<void>;
export declare const copyCfnTemplate: (context: any, category: string, options: any, cfnFilename: string) => Promise<any>;
export declare const saveResourceParameters: (context: any, providerName: string, category: string, resource: string, params: any, envSpecificParams?: any[]) => void;
export declare const removeDeprecatedProps: (props: any) => any;
export declare const copyS3Assets: (context: any, props: any) => Promise<void>;
//# sourceMappingURL=synthesize-resources.d.ts.map